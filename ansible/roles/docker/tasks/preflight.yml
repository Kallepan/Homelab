# Description: This file contains the tasks that are executed before the installation of Docker.
---
- name: Install Recommended packages
  ansible.builtin.apt:
    name: "{{ docker_necessary_packages }}"
    state: present
    update_cache: true
  become: true
  become_user: root

### The following is necessary for rootless Docker
- name: Create docker group
  ansible.builtin.group:
    name: docker
    state: present
    gid: "{{ docker_group_gid | default(3000) }}"
  become: true
  become_user: root
  when: docker_user != 'root'

- name: Add docker user - "{{ docker_user }}"
  ansible.builtin.user:
    name: "{{ docker_user }}"
    # Set specific UID for the user
    uid: "{{ docker_user_uid | default(3000) }}"
    state: present
    shell: /bin/bash
    home: /home/{{ docker_user }}
    group: docker
    create_home: true
  become: true
  become_user: root
  when: docker_user != 'root'

- name: Install Necessary packages for Rootless Docker
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  with_items:
    - dbus-user-session
    - uidmap
    - slirp4netns
  become: true
  become_user: root
  when: docker_user != 'root'

- name: Check if user lingers - "{{ docker_user }}"
  ansible.builtin.stat:
    path: "/var/lib/systemd/linger/{{ docker_user }}"
  register: linger
  become: true
  become_user: root
  when: docker_user != 'root'

- name: Enable Lingering
  ansible.builtin.command:
    cmd: loginctl enable-linger {{ docker_user }}
  register: linger
  become: true
  become_user: root
  when: docker_user != 'root' and not linger.stat.exists
  changed_when: linger.stdout == "linger enabled"

- name: Add configuration to AppArmor Profile
  ansible.builtin.copy:
    dest: /etc/apparmor.d/home.{{ docker_user }}.bin.rootlesskit
    content: |
      abi <abi/4.0>,
      include <tunables/global>

      "/home/{{ docker_user }}/bin/rootlesskit" flags=(unconfined) {
        userns,

        include if exists <local/home.{{ docker_user }}.bin.rootlesskit>
      }
    mode: "0664"
  when: ansible_distribution == 'Ubuntu' and docker_user != 'root'
  become_user: root
  become: true
  register: apparmor

- name: Restart apparmor.service
  ansible.builtin.systemd:
    name: apparmor
    state: restarted
  when: ansible_distribution == 'Ubuntu' and apparmor.changed and docker_user != 'root'
  become_user: root
  become: true
